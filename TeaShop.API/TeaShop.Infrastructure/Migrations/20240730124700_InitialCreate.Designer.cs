// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeaShop.Infrastructure.Database;

#nullable disable

namespace TeaShop.Infrastructure.Migrations
{
    [DbContext(typeof(TeaShopDbContext))]
    [Migration("20240730124700_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TeaShop.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Email = "JohnDoe@gmai.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Phone = "123456789"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Email = "JaneSmith@gmail.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Phone = "43256768"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Email = "OleksandrLobchenko@gmail.com",
                            FirstName = "Oleksandr",
                            LastName = "Lobchenko",
                            Phone = "243564753"
                        });
                });

            modelBuilder.Entity("TeaShop.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CustomerId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CustomerId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CustomerId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CustomerId = new Guid("00000000-0000-0000-0000-000000000003")
                        });
                });

            modelBuilder.Entity("TeaShop.Domain.Entities.Tea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailableStock")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsInStock")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("TeaTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("TeaTypeId");

                    b.ToTable("Tea");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            AvailableStock = 34,
                            CreatedAt = new DateTime(2024, 7, 30, 12, 46, 59, 224, DateTimeKind.Utc).AddTicks(4464),
                            CreatedBy = "Seed",
                            Description = "A white leaf tea from China is carefully scented with Pomegranate flavouring and decorated with jasmine flowers and rose petals to create this delightful tea. A smooth and rounded liquor with a sweet pomegranate flavour.",
                            IsInStock = true,
                            Name = "Pomegranate White Tea",
                            Price = 5.99m,
                            TeaTypeId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            AvailableStock = 128,
                            CreatedAt = new DateTime(2024, 7, 30, 12, 46, 59, 224, DateTimeKind.Utc).AddTicks(4470),
                            CreatedBy = "Seed",
                            Description = "Our Classic Blend In 1831 we created Earl Grey tea in our shop on the Strand on the request of the Prime Minister. He loved it so much he gave his name to it. Before long it had taken London by storm and it is still a firm favourite amongst people who like things with a twist, who travel off the beaten track and don't always play by the rules.",
                            IsInStock = true,
                            Name = "Earl Grey",
                            Price = 5.84m,
                            TeaTypeId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            AvailableStock = 200,
                            CreatedAt = new DateTime(2024, 7, 30, 12, 46, 59, 224, DateTimeKind.Utc).AddTicks(4474),
                            CreatedBy = "Seed",
                            Description = "What does it taste like? Strong by name, strong by nature. This is the breakfast tea you love, but more so. Bold and full of flavour.",
                            IsInStock = true,
                            Name = "Strong English Breakfast",
                            Price = 5.99m,
                            TeaTypeId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            AvailableStock = 0,
                            CreatedAt = new DateTime(2024, 7, 30, 12, 46, 59, 224, DateTimeKind.Utc).AddTicks(4478),
                            CreatedBy = "Seed",
                            Description = "China Cui Min White Tips Organic Tea. Picked by hand during March and April, this Cui Min is produced only using the first fresh buds together with the youngest still unopened leaves.",
                            IsInStock = false,
                            Name = "China Cui Min White Tips Organic Tea",
                            Price = 5.60m,
                            TeaTypeId = new Guid("00000000-0000-0000-0000-000000000002")
                        });
                });

            modelBuilder.Entity("TeaShop.Domain.Entities.TeaType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("TeaTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 7, 30, 12, 46, 59, 224, DateTimeKind.Utc).AddTicks(4196),
                            CreatedBy = "Seed",
                            Description = "Black tea is one of the most popular tea types. It is fully oxidised which helps to bring out the strong flavours. It often has a strong, malty and full-bodied flavour profile. There are many varieties of black tea which includes Assam Tea, as well as Darjeeling tea.",
                            Name = "Black Tea"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2024, 7, 30, 12, 46, 59, 224, DateTimeKind.Utc).AddTicks(4201),
                            CreatedBy = "Seed",
                            Description = "White tea is a variety of tea made from young leaves of the Camellia sinensis plant. The leaves are the least processed of all teas which gives the tea a delicate and naturally sweet flavour. It can often taste fruity or floral. White tea contains little caffeine. Popular varieties of white tea includes White Peony and Silver Needle.",
                            Name = "White Tea"
                        });
                });

            modelBuilder.Entity("TeaShop.Domain.Entities.Customer", b =>
                {
                    b.OwnsOne("TeaShop.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.Property<int?>("HouseNumber")
                                .HasColumnType("int");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(60)
                                .HasColumnType("nvarchar(60)");

                            b1.HasKey("CustomerId");

                            b1.ToTable("CustomerAddresses", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");

                            b1.HasData(
                                new
                                {
                                    CustomerId = new Guid("00000000-0000-0000-0000-000000000001"),
                                    City = "London",
                                    Country = "GBR",
                                    PostalCode = "12345",
                                    Street = "Main Street 4"
                                },
                                new
                                {
                                    CustomerId = new Guid("00000000-0000-0000-0000-000000000002"),
                                    City = "London",
                                    Country = "GBR",
                                    HouseNumber = 3,
                                    PostalCode = "ASD VCF3",
                                    Street = "Somewhere 1"
                                },
                                new
                                {
                                    CustomerId = new Guid("00000000-0000-0000-0000-000000000003"),
                                    City = "London",
                                    Country = "GBR",
                                    PostalCode = "ASD BKR2",
                                    Street = "Here 34"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("TeaShop.Domain.Entities.Order", b =>
                {
                    b.HasOne("TeaShop.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TeaShop.Domain.ValueObjects.OrderDetails", "Details", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("Discount")
                                .HasColumnType("float");

                            b1.Property<DateTime>("OrderedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasMaxLength(60)
                                .HasColumnType("nvarchar(60)");

                            b1.HasKey("OrderId");

                            b1.ToTable("OrderDetails", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OrderId");

                            b1.OwnsOne("TeaShop.Domain.ValueObjects.Address", "ShippingAddress", b2 =>
                                {
                                    b2.Property<Guid>("OrderDetailsOrderId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("City")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)");

                                    b2.Property<string>("Country")
                                        .IsRequired()
                                        .HasMaxLength(3)
                                        .HasColumnType("nvarchar(3)");

                                    b2.Property<int?>("HouseNumber")
                                        .HasColumnType("int");

                                    b2.Property<string>("PostalCode")
                                        .IsRequired()
                                        .HasMaxLength(10)
                                        .HasColumnType("nvarchar(10)");

                                    b2.Property<string>("Street")
                                        .IsRequired()
                                        .HasMaxLength(60)
                                        .HasColumnType("nvarchar(60)");

                                    b2.HasKey("OrderDetailsOrderId");

                                    b2.ToTable("ShippingAddresses", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("OrderDetailsOrderId");

                                    b2.HasData(
                                        new
                                        {
                                            OrderDetailsOrderId = new Guid("00000000-0000-0000-0000-000000000001"),
                                            City = "London",
                                            Country = "GBR",
                                            PostalCode = "12345",
                                            Street = "Main Street 4"
                                        },
                                        new
                                        {
                                            OrderDetailsOrderId = new Guid("00000000-0000-0000-0000-000000000002"),
                                            City = "London",
                                            Country = "GBR",
                                            PostalCode = "12345",
                                            Street = "Main Street 4"
                                        },
                                        new
                                        {
                                            OrderDetailsOrderId = new Guid("00000000-0000-0000-0000-000000000003"),
                                            City = "London",
                                            Country = "GBR",
                                            HouseNumber = 3,
                                            PostalCode = "ASD VCF3",
                                            Street = "Somewhere 1"
                                        },
                                        new
                                        {
                                            OrderDetailsOrderId = new Guid("00000000-0000-0000-0000-000000000004"),
                                            City = "London",
                                            Country = "GBR",
                                            PostalCode = "ASD BKR2",
                                            Street = "Here 34"
                                        });
                                });

                            b1.OwnsMany("TeaShop.Domain.ValueObjects.TeaItem", "Items", b2 =>
                                {
                                    b2.Property<Guid>("OrderDetailsOrderId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<double>("Discount")
                                        .HasColumnType("float");

                                    b2.Property<int>("Quantity")
                                        .HasColumnType("int");

                                    b2.Property<Guid>("TeaId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("OrderDetailsOrderId", "Id");

                                    b2.HasIndex("TeaId");

                                    b2.ToTable("OrderDetailsTeaItems", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("OrderDetailsOrderId");

                                    b2.HasOne("TeaShop.Domain.Entities.Tea", "Tea")
                                        .WithMany()
                                        .HasForeignKey("TeaId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.Navigation("Tea");

                                    b2.HasData(
                                        new
                                        {
                                            OrderDetailsOrderId = new Guid("00000000-0000-0000-0000-000000000001"),
                                            Id = 1,
                                            Discount = 0.10000000000000001,
                                            Quantity = 2,
                                            TeaId = new Guid("00000000-0000-0000-0000-000000000001")
                                        },
                                        new
                                        {
                                            OrderDetailsOrderId = new Guid("00000000-0000-0000-0000-000000000001"),
                                            Id = 2,
                                            Discount = 0.0,
                                            Quantity = 5,
                                            TeaId = new Guid("00000000-0000-0000-0000-000000000002")
                                        },
                                        new
                                        {
                                            OrderDetailsOrderId = new Guid("00000000-0000-0000-0000-000000000002"),
                                            Id = 3,
                                            Discount = 0.10000000000000001,
                                            Quantity = 2,
                                            TeaId = new Guid("00000000-0000-0000-0000-000000000001")
                                        },
                                        new
                                        {
                                            OrderDetailsOrderId = new Guid("00000000-0000-0000-0000-000000000003"),
                                            Id = 4,
                                            Discount = 0.029999999999999999,
                                            Quantity = 1,
                                            TeaId = new Guid("00000000-0000-0000-0000-000000000003")
                                        },
                                        new
                                        {
                                            OrderDetailsOrderId = new Guid("00000000-0000-0000-0000-000000000003"),
                                            Id = 5,
                                            Discount = 0.0,
                                            Quantity = 3,
                                            TeaId = new Guid("00000000-0000-0000-0000-000000000004")
                                        },
                                        new
                                        {
                                            OrderDetailsOrderId = new Guid("00000000-0000-0000-0000-000000000004"),
                                            Id = 6,
                                            Discount = 0.10000000000000001,
                                            Quantity = 1,
                                            TeaId = new Guid("00000000-0000-0000-0000-000000000003")
                                        },
                                        new
                                        {
                                            OrderDetailsOrderId = new Guid("00000000-0000-0000-0000-000000000004"),
                                            Id = 7,
                                            Discount = 0.0,
                                            Quantity = 2,
                                            TeaId = new Guid("00000000-0000-0000-0000-000000000004")
                                        },
                                        new
                                        {
                                            OrderDetailsOrderId = new Guid("00000000-0000-0000-0000-000000000004"),
                                            Id = 8,
                                            Discount = 0.20000000000000001,
                                            Quantity = 3,
                                            TeaId = new Guid("00000000-0000-0000-0000-000000000001")
                                        });
                                });

                            b1.Navigation("Items");

                            b1.Navigation("ShippingAddress")
                                .IsRequired();

                            b1.HasData(
                                new
                                {
                                    OrderId = new Guid("00000000-0000-0000-0000-000000000001"),
                                    Discount = 0.050000000000000003,
                                    OrderedAt = new DateTime(2024, 7, 30, 12, 46, 59, 224, DateTimeKind.Utc).AddTicks(5115),
                                    Status = "New"
                                },
                                new
                                {
                                    OrderId = new Guid("00000000-0000-0000-0000-000000000002"),
                                    Discount = 0.0,
                                    OrderedAt = new DateTime(2024, 7, 23, 14, 34, 0, 0, DateTimeKind.Utc),
                                    Status = "Done"
                                },
                                new
                                {
                                    OrderId = new Guid("00000000-0000-0000-0000-000000000003"),
                                    Discount = 0.29999999999999999,
                                    OrderedAt = new DateTime(2024, 7, 30, 12, 46, 59, 224, DateTimeKind.Utc).AddTicks(5121),
                                    Status = "InProgress"
                                },
                                new
                                {
                                    OrderId = new Guid("00000000-0000-0000-0000-000000000004"),
                                    Discount = 0.10000000000000001,
                                    OrderedAt = new DateTime(2024, 7, 30, 12, 46, 59, 224, DateTimeKind.Utc).AddTicks(5122),
                                    Status = "New"
                                });
                        });

                    b.Navigation("Customer");

                    b.Navigation("Details")
                        .IsRequired();
                });

            modelBuilder.Entity("TeaShop.Domain.Entities.Tea", b =>
                {
                    b.HasOne("TeaShop.Domain.Entities.TeaType", "Type")
                        .WithMany("Tea")
                        .HasForeignKey("TeaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("TeaShop.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TeaShop.Domain.Entities.TeaType", b =>
                {
                    b.Navigation("Tea");
                });
#pragma warning restore 612, 618
        }
    }
}
