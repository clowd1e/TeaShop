// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeaShop.Identity.Database;

#nullable disable

namespace TeaShop.Identity.Migrations
{
    [DbContext(typeof(TeaShopIdentityDbContext))]
    partial class TeaShopIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Name = "None",
                            NormalizedName = "NONE"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Name = "MainManager",
                            NormalizedName = "MAINMANAGER"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000001",
                            RoleId = "00000000-0000-0000-0000-000000000004"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000002",
                            RoleId = "00000000-0000-0000-0000-000000000003"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000003",
                            RoleId = "00000000-0000-0000-0000-000000000003"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000004",
                            RoleId = "00000000-0000-0000-0000-000000000005"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000005",
                            RoleId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000006",
                            RoleId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000007",
                            RoleId = "00000000-0000-0000-0000-000000000002"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TeaShop.Identity.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f4373b37-02b2-48c2-9d70-93f0730e5143",
                            Email = "MainManager1@teashop.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Pork",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAINMANAGER1@TEASHOP.COM",
                            NormalizedUserName = "JOHN_PORK_MAINMANAGER",
                            PasswordHash = "$2a$13$uV/memUj70qHpjrmHUt1FezsbaqsQYbt8MEfQ7L6wf.4W.V1w26h.",
                            PhoneNumberConfirmed = false,
                            Role = "MainManager",
                            SecurityStamp = "e4cd750e-5f98-4258-acde-3ec3ebf55663",
                            TwoFactorEnabled = false,
                            UserName = "John_Pork_MainManager"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d04d6031-9eef-4e41-9b97-02fce63b9b01",
                            Email = "Manager1@teashop.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER1@TEASHOP.COM",
                            NormalizedUserName = "JANE_DOE_MANAGER",
                            PasswordHash = "$2a$13$ctalOlEbmvVo0I23oxDB4eYSFAM6WscZIXcpDW4n4O07.qQMkBaja",
                            PhoneNumberConfirmed = false,
                            Role = "Manager",
                            SecurityStamp = "d8414fb4-48e1-4a52-bbcb-d010ab66cc7d",
                            TwoFactorEnabled = false,
                            UserName = "Jane_Doe_Manager"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d448688-ee75-43bc-815b-7257dd5b0bd0",
                            Email = "Manager2@teashop.com",
                            EmailConfirmed = false,
                            FirstName = "Tom",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER2@TEASHOP.COM",
                            NormalizedUserName = "TOM_SMITH_MANAGER",
                            PasswordHash = "$2a$13$6V/GXiW/FUjnqDfEtOgsKukctWVwHxcFuDJMFxgdYWB1ksELGc/Ya",
                            PhoneNumberConfirmed = false,
                            Role = "Manager",
                            SecurityStamp = "b674a6b1-187c-413b-bed1-6a807e7e3fa3",
                            TwoFactorEnabled = false,
                            UserName = "Tom_Smith_Manager"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c92872c-5975-4e7c-9aae-2d272ac36a91",
                            Email = "Employee1@teashop.com",
                            EmailConfirmed = false,
                            FirstName = "Alice",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLOYEE1@TEASHOP.COM",
                            NormalizedUserName = "ALICE_JOHNSON_EMPLOYEE",
                            PasswordHash = "$2a$13$ns7MovTtBBsesZVFxWmHIusPIFtqM4YhKqybaXJyjU36TX6Tbv90e",
                            PhoneNumberConfirmed = false,
                            Role = "Employee",
                            SecurityStamp = "295e0e58-47dc-4685-a225-23cee9e3ef38",
                            TwoFactorEnabled = false,
                            UserName = "Alice_Johnson_Employee"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c26209f7-7378-4954-bce5-3c6a80df4ed3",
                            Email = "Client1@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Bob",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT1@GMAIL.COM",
                            NormalizedUserName = "BOB_BROWN_CLIENT",
                            PasswordHash = "$2a$13$q93ieRxkX25ge0m.qYL5U.hyTxtSPg/FYbBcsocAsYXsgIgGIlhG6",
                            PhoneNumberConfirmed = false,
                            Role = "Client",
                            SecurityStamp = "51d64883-63dd-4481-acc3-7d09fd3b3774",
                            TwoFactorEnabled = false,
                            UserName = "Bob_Brown_Client"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000006",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92f8c01e-3052-454d-a723-9e197dab6745",
                            Email = "Client2@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Eve",
                            LastName = "White",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT2@GMAIL.COM",
                            NormalizedUserName = "EVE_WHITE_CLIENT",
                            PasswordHash = "$2a$13$JCBCH.l5xSBy0hPALOwxOeQQU37yWzdcxhwkUduOX6nRr8HCxrha6",
                            PhoneNumberConfirmed = false,
                            Role = "Client",
                            SecurityStamp = "7348d079-989e-44b5-b360-6afae20bb99d",
                            TwoFactorEnabled = false,
                            UserName = "Eve_White_Client"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000007",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d3499291-12c3-4558-b114-a082d0f15598",
                            Email = "Client3@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Charlie",
                            LastName = "Green",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT3@GMAIL.COM",
                            NormalizedUserName = "CHARLIE_GREEN_CLIENT",
                            PasswordHash = "$2a$13$HO.utMOSci7jlZQTZKzpd.eb756FIuRV3rB.e3/w.L9r8qr2wB4by",
                            PhoneNumberConfirmed = false,
                            Role = "Client",
                            SecurityStamp = "bf463853-9216-4224-b3ca-042c1716788d",
                            TwoFactorEnabled = false,
                            UserName = "Charlie_Green_Client"
                        });
                });

            modelBuilder.Entity("TeaShop.Identity.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            BirthDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "0923425332"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            BirthDate = new DateTime(1990, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "03458654320"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            BirthDate = new DateTime(1990, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "32459765432"
                        });
                });

            modelBuilder.Entity("TeaShop.Identity.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Employees", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            BirthDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HireDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "567908432",
                            Salary = 10000m
                        });
                });

            modelBuilder.Entity("TeaShop.Identity.Models.MainManager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("MainManagers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            BirthDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HireDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "434657860",
                            Salary = 10000m
                        });
                });

            modelBuilder.Entity("TeaShop.Identity.Models.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Managers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            BirthDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HireDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "123456789",
                            Salary = 10000m
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            BirthDate = new DateTime(1990, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HireDate = new DateTime(2020, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "987654321",
                            Salary = 10000m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TeaShop.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TeaShop.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeaShop.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TeaShop.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeaShop.Identity.Models.Client", b =>
                {
                    b.OwnsOne("TeaShop.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.Property<int?>("HouseNumber")
                                .HasColumnType("int");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(60)
                                .HasColumnType("nvarchar(60)");

                            b1.HasKey("ClientId");

                            b1.ToTable("ClientAddresses", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ClientId");

                            b1.HasData(
                                new
                                {
                                    ClientId = new Guid("00000000-0000-0000-0000-000000000005"),
                                    City = "London",
                                    Country = "GBR",
                                    HouseNumber = 1,
                                    PostalCode = "ASD VCF3",
                                    Street = "Somewhere 2"
                                },
                                new
                                {
                                    ClientId = new Guid("00000000-0000-0000-0000-000000000006"),
                                    City = "London",
                                    Country = "GBR",
                                    PostalCode = "ASC IE4V",
                                    Street = "Nearby 35"
                                },
                                new
                                {
                                    ClientId = new Guid("00000000-0000-0000-0000-000000000007"),
                                    City = "London",
                                    Country = "GBR",
                                    HouseNumber = 12,
                                    PostalCode = "ASD VCF3",
                                    Street = "There 123/4"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("TeaShop.Identity.Models.Employee", b =>
                {
                    b.OwnsOne("TeaShop.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.Property<int?>("HouseNumber")
                                .HasColumnType("int");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(60)
                                .HasColumnType("nvarchar(60)");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("EmployeeAddresses", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");

                            b1.HasData(
                                new
                                {
                                    EmployeeId = new Guid("00000000-0000-0000-0000-000000000004"),
                                    City = "City",
                                    Country = "GBR",
                                    PostalCode = "VC6 V7R4",
                                    Street = "Here 23"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("TeaShop.Identity.Models.MainManager", b =>
                {
                    b.OwnsOne("TeaShop.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("MainManagerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.Property<int?>("HouseNumber")
                                .HasColumnType("int");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(60)
                                .HasColumnType("nvarchar(60)");

                            b1.HasKey("MainManagerId");

                            b1.ToTable("MainManagerAddresses", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MainManagerId");

                            b1.HasData(
                                new
                                {
                                    MainManagerId = new Guid("00000000-0000-0000-0000-000000000001"),
                                    City = "City",
                                    Country = "GBR",
                                    HouseNumber = 32,
                                    PostalCode = "VC5 VSD4",
                                    Street = "Street 342"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("TeaShop.Identity.Models.Manager", b =>
                {
                    b.OwnsOne("TeaShop.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("ManagerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.Property<int?>("HouseNumber")
                                .HasColumnType("int");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(60)
                                .HasColumnType("nvarchar(60)");

                            b1.HasKey("ManagerId");

                            b1.ToTable("ManagerAddresses", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ManagerId");

                            b1.HasData(
                                new
                                {
                                    ManagerId = new Guid("00000000-0000-0000-0000-000000000002"),
                                    City = "City",
                                    Country = "GBR",
                                    PostalCode = "VC5 VSD4",
                                    Street = "Here 123"
                                },
                                new
                                {
                                    ManagerId = new Guid("00000000-0000-0000-0000-000000000003"),
                                    City = "City",
                                    Country = "GBR",
                                    PostalCode = "VC5 VSD4",
                                    Street = "There 321"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
